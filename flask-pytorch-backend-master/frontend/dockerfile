# Use a lightweight Node.js base image for building
FROM node:14-alpine as builder

# Set the working directory inside the container
WORKDIR /app

# Copy the frontend files to the working directory
COPY . .

# Install dependencies
RUN npm install

# Build the production-ready React app
RUN npm run build

# Use a minimal Node.js base image for serving the application
FROM node:14-alpine

# Set the working directory inside the container
WORKDIR /app

# Copy only the production build from the previous stage
COPY --from=builder /app/build ./build

# Install a lightweight web server for serving the frontend (e.g., 'serve')
RUN npm install -g serve

# Expose the port the frontend will be served on (change the port if needed)
EXPOSE 3000

# Serve the production build using 'serve'
CMD ["serve", "-s", "build"]



# # Use a Node.js base image
# FROM node:14-alpine

# # Set the working directory inside the container
# WORKDIR /app

# # Copy the frontend files to the working directory
# COPY . .

# # Install dependencies
# RUN npm install

# # Build the production-ready React app
# RUN npm run build

# # Expose the port the frontend will be served on (change the port if needed)
# EXPOSE 3000

# # Serve the production build using a lightweight web server like 'serve'
# CMD ["npx", "serve", "-s", "build"]





# # Base Image for the Frontend React.js Application Docker image
# FROM node:14-alpine
# # The working directory (folder) for the Frontend React.js Application container
# WORKDIR /app
# # Copying the dependencies files for the Frontend React.js Application folder
# COPY package.json .
# #Installing all the dependencies/framework/libraries for the Frontend React.js Application
# RUN npm install
# #Copying all the Frontend React.js Application files to the container working directory
# COPY . .
# #Frontend React.js Application container will run on this port
# EXPOSE 3000
# #Command to start the Frontend React.js Application Docker container
# CMD ["npm", "start"]


# # Base image
# FROM node:14-alpine

# # Set the working directory inside the container
# WORKDIR /app

# # Copy package.json and package-lock.json to the working directory
# COPY package*.json ./

# # Install dependencies
# RUN npm install

# # Copy the entire application to the working directory
# COPY . .

# # Build the React app
# RUN npm run build

# # Expose the desired port (adjust if needed)
# EXPOSE 3000

# # Define the command to run the React app
# CMD ["npm", "start"]
